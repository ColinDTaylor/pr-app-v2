'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _api = new WeakMap();

var Tournaments = function () {
  function Tournaments(parent) {
    _classCallCheck(this, Tournaments);

    _api = parent;
  }

  _createClass(Tournaments, [{
    key: 'index',
    value: function index() {
      var params = {};

      return new Promise(function (resolve, reject) {
        _api.request('GET', 'tournaments.json', params).then(function (response) {
          //remove 1st layer "tournament"
          resolve(response.map(function (obj) {
            return obj.tournament;
          }));
        }).catch(function (err) {
          reject(err.message);
        });
      });
    }
  }, {
    key: 'create',
    value: function create(name, url) {
      var tournament_type = arguments.length <= 2 || arguments[2] === undefined ? 'single elimination' : arguments[2];

      var params = {
        name: name,
        tournament_type: tournament_type,
        url: url
      };

      return new Promise(function (resolve, reject) {
        _api.request('POST', 'tournaments.json', params).then(function (response) {
          resolve(response.tournament);
        }).catch(function (err) {
          reject(err.message);
        });
      });
    }
  }, {
    key: 'show',
    value: function show(tid) {
      var params = {};

      return new Promise(function (resolve, reject) {
        _api.request('GET', 'tournaments/' + tid + '.json', params).then(function (response) {
          resolve(response.tournament);
        }).catch(function (err) {
          reject(err.message);
        });
      });
    }

    //http://api.challonge.com/v1/documents/tournaments/update

  }, {
    key: 'update',
    value: function update(tid, params) {
      return new Promise(function (resolve, reject) {
        _api.request('PUT', 'tournaments/' + tid + '.json', params).then(function (response) {
          resolve(response.tournament);
        }).catch(function (err) {
          reject(err.message);
        });
      });
    }
  }, {
    key: 'destroy',
    value: function destroy(tid) {
      var params = {};

      return new Promise(function (resolve, reject) {
        _api.request('DELETE', 'tournaments/' + tid + '.json', params).then(function (response) {
          response.tournament.id === tid ? resolve() : reject('Mismatch IDs');
        }).catch(function (err) {
          reject(err.message);
        });
      });
    }
  }, {
    key: 'start',
    value: function start(tid) {
      var params = {};

      return new Promise(function (resolve, reject) {
        _api.request('POST', 'tournaments/' + tid + '/start.json', params).then(function (response) {
          response.tournament.id === tid ? resolve(response.tournament) : reject('Mistmatch IDs');
        }).catch(function (err) {
          reject(err.message);
        });
      });
    }
  }]);

  return Tournaments;
}();

exports.default = Tournaments;